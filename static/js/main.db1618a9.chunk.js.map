{"version":3,"sources":["components/navbar.js","components/charging.js","components/tables.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","color","textAlign","bar","padding","background","Navbar","classes","className","AppBar","position","Toolbar","Typography","variant","ChargingData","size","icon","faClock","button","users","Tables","useHistory","useState","setUsers","setFavSongs","e","a","fetch","mode","response","json","data","handleData","handleToFavoriteMusic","songId","console","log","align","scope","length","map","key","_id","name","lastname","age","email","Button","onClick","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db1618a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    color: \"#ffffff\",\r\n    textAlign: \"center\",\r\n  },\r\n  bar:{\r\n    padding: 10,\r\n    background: '#2c6e59',\r\n  }\r\n}));\r\n\r\nexport const Navbar = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n          <AppBar position=\"static\" className={classes.bar}>\r\n            <Toolbar>\r\n              <Typography variant=\"h5\"  className={classes.title}>\r\n                Panel\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </div>\r\n      );\r\n}","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport const ChargingData = () => {\r\n    return (\r\n        <div className=\"icon-container row\">\r\n            <div className=\"col text-center\">\r\n                <FontAwesomeIcon size=\"5x\" icon={faClock}/>\r\n                <p className=\"getting-data-text\">Obteniendo datos!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport {ChargingData} from './charging';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n      flexGrow: 1,\r\n      color: \"#fff\",\r\n      textAlign: \"center\",\r\n    },\r\n    button:{\r\n        background: '#2c6e59',\r\n    },\r\n    users: {\r\n        color: '#2c6e59',\r\n    }\r\n  }));\r\n\r\nexport const Tables = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles();\r\n\r\n    const [users, setUsers] = useState([]);\r\n\r\n    const [favSongs, setFavSongs] = useState([{}]);\r\n\r\n    const handleData = async (e) => {\r\n\r\n    const response = await fetch('http://localhost:4100/users',{\r\n        mode: 'cors',\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    setUsers(data);\r\n\r\n    }\r\n\r\n    handleData();\r\n\r\n\r\n    const handleToFavoriteMusic = async (songId) => {\r\n\r\n        console.log(songId)\r\n        setFavSongs(songId)\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row align-items-center p-5 d-flex vh-100 justify-content-center\">\r\n                <div className=\"col-xs-6 col-lg-12\">\r\n                <div className=\"p-3\">\r\n                    <Typography align=\"center\" className={classes.users} variant=\"h5\" >Usuarios</Typography>\r\n                </div>\r\n                <div className=\"table-responsive table-hover\">\r\n                    <table className=\"table table-bordered\">\r\n                        <thead className=\"table-head\">\r\n                            <tr>\r\n                                <th scope=\"col\"><Typography className={classes.title} variant=\"title\" >Nombre</Typography></th>\r\n                                <th scope=\"col\"><Typography className={classes.title} variant=\"title\" >Apellido</Typography></th>\r\n                                <th scope=\"col\"><Typography className={classes.title} variant=\"title\" >Edad</Typography></th>\r\n                                <th scope=\"col\"><Typography className={classes.title} variant=\"title\" >E-mail</Typography></th>\r\n                                <th scope=\"col\"><Typography className={classes.title} variant=\"title\" >Acciones</Typography></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"table-body\">\r\n                            {users.length > 0 ? (\r\n                                users.map((data) => (\r\n                                    <tr key={data._id}>\r\n                                        <th>{data.name}</th>\r\n                                        <th>{data.lastname}</th>\r\n                                        <th>{data.age}</th>\r\n                                        <th>{data.email}</th>\r\n                                        <th>\r\n                                            <div className=\"text-center\">\r\n                                                <Button \r\n                                                    variant=\"contained\" \r\n                                                    className={classes.button}\r\n                                                    onClick={()=> handleToFavoriteMusic(data._id)}\r\n                                                    \r\n                                                >\r\n                                                    Canciones Favoritas\r\n                                                </Button>\r\n                                            </div>\r\n                                        </th>\r\n                                    </tr>\r\n\r\n                                ))\r\n                            ) : (\r\n\r\n                                <div className=\"container p-5 my-5 mx-5\">\r\n                                    <center>\r\n                                        <ChargingData />\r\n                                    </center>\r\n                                </div>\r\n\r\n                            )}\r\n                        </tbody> \r\n                    </table>\r\n                    <table className=\"table table-bordered\">\r\n                        <thead className='table-head'>\r\n                            <tr>\r\n                                <th scope=\"col\"><Typography className={classes.title} variant=\"title\" >ID de la canci√≥n</Typography></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className='table-body'>\r\n                                {\r\n                                    <tr>\r\n                                        {/* <th scope=\"col\">{favSongs}</th> */}\r\n                                    </tr>\r\n                                }\r\n                        </tbody>\r\n                    </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      );\r\n}\r\n","import React from 'react';\n\n\nimport {Navbar} from '../src/components/navbar';\nimport {Tables} from '../src/components/tables';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n                <nav>\n                    <Navbar />\n                </nav>\n                <section>\n                    <Tables />\n                </section>\n            </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n/* BOOSTRAP */\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport './assets/css/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}